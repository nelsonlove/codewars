
Dashboard
Kata
Docs
Blog
Kumite
Forum
Leaders

5 kyu
295
nelsonlove

Name:Unknown
Clan:Unknown
Member Since:Jun 2021
Last Seen:Aug 2021
Profiles:
Following:0
Followers:0
Allies:0
View Profile Badges
Earn extra honor and gain new allies!
Honor is earned for each new codewarrior who joins.
LEARN MORE
Stats
Kata
Solutions
Translations
Collections
Kumite
Social
Discourse
Completed (21)
Unfinished
Obsolete
5 kyu
Rot13
Python:

import string


def rot13(message):
    charlists = [string.ascii_lowercase, string.ascii_uppercase]
    result = []
    for char in message:
        if all([char not in charlist for charlist in charlists]):
            result.append(char)
            continue

        for charlist in charlists:
            if char in charlist:
                i = charlist.index(char) + 13
                if i > 25:
                    i -= 26
                result.append(charlist[i])
    return ''.join(result)
7 days agoRefactorDiscuss
import string


def rot13(message):
    charlists = [string.ascii_lowercase, string.ascii_uppercase]
    result = []
    for char in message:
        if all([char not in charlist for charlist in charlists]):
            result.append(char)
            continue

        for charlist in [string.ascii_lowercase, string.ascii_uppercase]:
            if char in charlist:
                i = charlist.index(char) + 13
                if i > 25:
                    i -= 26
                result.append(charlist[i])
    return ''.join(result)
7 days agoRefactorDiscuss
5 kyu
Pick peaks
Python:

def pick_peaks(arr):
    pos = []
    peaks = []

    highest = None
    for i, n in enumerate(arr):
        if i and arr[i - 1] < n:
            highest = (i, n)
        elif highest and n < highest[1]:
            pos.append(highest[0])
            peaks.append(highest[1])
            highest = None
    return {'pos': pos, 'peaks': peaks}
7 days agoRefactorDiscuss
4 kyu
The observed PIN
Python:

def get_pins(observed):
    adjacents = {
        '0': ['8'],
        '1': ['2', '4'],
        '2': ['1', '3', '5'],
        '3': ['2', '6'],
        '4': ['1', '5', '7'],
        '5': ['2', '4', '6', '8'],
        '6': ['3', '5', '9'],
        '7': ['4', '8'],
        '8': ['7', '5', '9', '0'],
        '9': ['8', '6'],
    }

    pins = {observed[0]} | set(adjacents[observed[0]])

    for i, true_digit in enumerate(observed[1:]):
        possible_digits = {true_digit} | set(adjacents[true_digit])
        pins = {pin + digit for pin in pins for digit in possible_digits}

    return pins

7 days agoRefactorDiscuss
def get_pins(observed):
    adjacents = {
        '0': ['8'],
        '1': ['2', '4'],
        '2': ['1', '3', '5'],
        '3': ['2', '6'],
        '4': ['1', '5', '7'],
        '5': ['2', '4', '6', '8'],
        '6': ['3', '5', '9'],
        '7': ['4', '8'],
        '8': ['7', '5', '9', '0'],
        '9': ['8', '6'],
    }

    pins = set({observed[0]} | set(adjacents[observed[0]]))

    for i, true_digit in enumerate(observed[1:]):
        all_possible_digits = {true_digit} | set(adjacents[true_digit])
        pins = {pin + digit for pin in pins for digit in all_possible_digits}

    return pins
7 days agoRefactor
5 kyu
Where my anagrams at?
Python:

def anagrams(word, words):
    return [match for match in words if sorted(match) == sorted(word)]
7 days agoRefactor
4 kyu
Strip Comments
Python:

def solution(string,markers):
    output = []
    for line in string.split('\n'):
        formatted = line.strip()
        for marker in markers:
            if marker in formatted:
                formatted = formatted.split(marker)[0].strip()
        output.append(formatted)
    return '\n'.join(output)
7 days agoRefactorDiscuss
5 kyu
Maximum subarray sum
Python:

def max_sequence(arr):
    max_sum = 0

    if all([n < 0 for n in arr]):
        return max_sum

    for i, _ in enumerate(arr):
        sub_arr = arr[i:]
        while sub_arr:
            if sum(sub_arr) > max_sum:
                max_sum = sum(sub_arr)
            sub_arr.pop(-1)

    return max_sum
7 days agoRefactorDiscuss
5 kyu
Did I Finish my Sudoku?
Python:

def done_or_not(board):  # board[i][j]
    rows = []
    cols = []
    squares = []
    for y in range(9):
        rows.append(board[y])
        col = []
        for x in range(9):
            col.append(board[x][y])
        cols.append(col)

    for a in range(3):
        i = a * 3
        for b in range(3):
            j = b * 3
            square = []
            for x in range(3):
                for y in range(3):
                    square.append(board[x + i][y + j])
            squares.append(square)

    for seq in cols + rows + squares:
        for i in range(9):
            if seq.count(i + 1) != 1:
                return 'Try again!'
    return 'Finished!'
7 days agoRefactorDiscuss
5 kyu
Calculating with Functions
Python:

def zero(func=None):
    return 0 if not func else func(0)
def one(func=None):
    return 1 if not func else func(1)
def two(func=None):
    return 2 if not func else func(2)
def three(func=None):
    return 3 if not func else func(3)
def four(func=None):
    return 4 if not func else func(4)
def five(func=None):
    return 5 if not func else func(5)
def six(func=None):
    return 6 if not func else func(6)
def seven(func=None):
    return 7 if not func else func(7)
def eight(func=None):
    return 8 if not func else func(8)
def nine(func=None):
    return 9 if not func else func(9)
def plus(n): #your code here
    return lambda x: x + n
def minus(n): #your code here
    return lambda x: x - n
def times(n): #your code here
    return lambda x: x * n
def divided_by(n): #your code here
    return lambda x: x // n
7 days agoRefactor
5 kyu
PaginationHelper
Python:

# TODO: complete this class

class PaginationHelper:

  # The constructor takes in an array of items and a integer indicating
  # how many items fit within a single page
  def __init__(self, collection, items_per_page):
    self.collection = collection
    self.items_per_page = items_per_page


  # returns the number of items within the entire collection
  def item_count(self):
    return len(self.collection)


  # returns the number of pages
  def page_count(self):
    return self.item_count() // self.items_per_page + 1


  # returns the number of items on the current page. page_index is zero based
  # this method should return -1 for page_index values that are out of range
  def page_item_count(self,page_index):
    if page_index >= self.page_count():
        return -1
    elif page_index + 1 == self.page_count():
        return self.item_count() % self.items_per_page
    else:
        return self.items_per_page


  # determines what page an item is on. Zero based indexes.
  # this method should return -1 for item_index values that are out of range
  def page_index(self, item_index):
    if item_index < 0 or item_index >= self.item_count():
        return -1

    return (item_index + 1) // self.items_per_page

7 days agoRefactorDiscuss
8 kyu
Remove String Spaces
Python:

def no_space(x):
    return x.replace(' ', '')
7 days agoRefactorDiscuss
6 kyu
Replace With Alphabet Position
Python:

import string

def alphabet_position(text):
    letters = {letter: i + 1 for i, letter in enumerate(string.ascii_lowercase)}

    return ' '.join(
        str(letters[l]) for l in text.lower()
        if l in letters.keys()
    )
2 months agoRefactor
6 kyu
Detect Pangram
Python:

import string

def is_pangram(s):
    string_letters = set(s.lower())
    return set(string.ascii_lowercase) - string_letters == set()
2 months agoRefactorDiscuss
6 kyu
Take a Ten Minute Walk
Python:

def is_valid_walk(walk):
    if len(walk) != 10:
        return False

    directions = {
        'n': (0, -1),
        'e': (1, 0),
        's': (0, 1),
        'w': (-1, 0)
    }

    location = [0, 0]

    for step in walk:
        x, y = directions[step]
        location[0] += x
        location[1] += y

    return location == [0, 0]
2 months agoRefactor
6 kyu
Counting Duplicates
Python:

def duplicate_count(text):
    letters = set()
    dupes = set()
    for letter in text.lower():
        if letter in letters:
            dupes.add(letter)
        else:
            letters.add(letter)
    return len(dupes)
2 months agoRefactor
6 kyu
Duplicate Encoder
Python:

def duplicate_encode(word):
    word = word.lower()
    chars = {}
    for letter in word:
        if letter not in chars:
            chars[letter] = '('
        else:
            chars[letter] = ')'

    return ''.join(chars[l] for l in word)
2 months agoRefactor
5 kyu
Human Readable Time
Python:

def make_readable(seconds):
    ss = seconds % 60
    mm = (seconds - ss) // 60
    hh = mm // 60
    mm = mm - hh * 60
    return "{:02d}:{:02d}:{:02d}".format(hh, mm, ss)
2 months agoRefactor
6 kyu
Find The Parity Outlier
Python:

def find_outlier(integers):
    def is_even(*ints):
        return all(i % 2 == 0 for i in ints)

    no_leading_outlier = is_even(sum(integers[:2], sum(integers[1:3])))
    evens_only = is_even(integers[0]) if no_leading_outlier else is_even(integers[-1])

    for i in integers:
        if is_even(i) != evens_only:
            return i
2 months agoRefactor
6 kyu
Unique In Order
Python:

def unique_in_order(iterable):
    uniques = [iterable[0]] if iterable else []
    for i in iterable:
        if uniques and i != uniques[-1]:
            uniques.append(i)
    return uniques
2 months agoRefactor
7 kyu
List Filtering
Python:

def filter_list(l):
  return [i for i in l if type(i) is not str]
2 months agoRefactorDiscuss
6 kyu
Array.diff
Python:

def array_diff(a, b):
    return [i for i in a if i not in b]
2 months agoRefactor
8 kyu
Multiply
Python:

def multiply(a, b):
    return a * b
2 months agoRefactor
def multiply(a, b):
  return a * b
2 months agoRefactor
Â© 2021 CodewarsAboutAPIBlogPrivacyTermsContact
powered by

