;;;; Project Euler: an exercise in inductive chain learning
;;;; Problem 2: Even Fibonacci numbers

;;; Each new term in the Fibonacci sequence is generated by adding the
;;; previous two terms. By starting with 1 and 2, the first 10 terms will be:
;;;
;;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;;;
;;; By considering the terms in the Fibonacci sequence whose values do not
;;; exceed four million, find the sum of the even-valued terms.


;;; Helper functions

(defun sum-last-two (ll)
  ;; Given a list of numbers, yields the sum of the last two elements.
 (sum (last ll 2)))

(defun test (a &optional b)
  ;; Commends indented along with code
  (do-something a)                      ; Comments indented at column 40, or the last

(defun fibonacci (max)
  ;; Generates Fibonacci numbers up to a limit /max/.

   (defun fibonacci-acc (l max)         ; Given a sequence of numbers /l/ and
                                        ; an upper limit /max/,

     (if (<= (sum-last-two l) max)      ; if the sum of the last two elements
                                        ; is less than or equal to max,

         (fibonacci-acc                 ; recursively call this function,
           (append l                    ; appending sum to /l/
             (list (sum-last-two l))
           ) max)
         l)                             ; Otherwise return the list
     )

   (fibonacci-acc '(1 2) max))          ; Run accumulator function


;;; Tests

(print (fibonacci 100))
;; : (1 2 3 5 8 13 21 34 55 89)
(print (fibonacci 1000))
;; : (1 2 3 5 8 13 21 34 55 89 144 233 377 610 987)


;;; Solution

(defun even-fibonaccis (max)
  ;; By considering the terms in the Fibonacci sequence whose values do not
  ;; exceed four million, find the sum of the even-valued terms:
  (remove-if-not (lambda (x) (integerp (/ x 2))) (fibonacci max)))

(print (sum (even-fibonaccis 4000000)))
;; : 4613732
